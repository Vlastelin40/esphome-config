substitutions:
  name: "esp-svitlobot"
  friendly_name: "Svitlo Bot"
  project_name: "ajs.svitlobot"
  project_version: "1.5.5"
  comment: "ESPHome Svitlo Bot"

esphome:
  name: "${name}"
  name_add_mac_suffix: true
  comment: $comment
  build_path: ./.build/$name
  project:
    name: "${project_name}"
    version: "${project_version}"

dashboard_import:
  package_import_url: github://andrewjswan/esphome-config/svitlobot.yaml@main

esp32:
  board: nodemcu-32s

api:
  reboot_timeout: 0s

ota:

logger:
  level: INFO

mdns:
  disabled: false

web_server:
  port: 80
  log: false
  version: 3

wifi:
  ap: {}

captive_portal:

http_request:
  useragent: "esphome/${name} (${project_version})"
  timeout: 10s

globals:
  - id: ok
    type: int
    restore_value: no
    initial_value: '0'

  - id: error
    type: int
    restore_value: no
    initial_value: '0'

interval:
  - interval: 60s
    then:
      - if:
          condition:
            and:
              - wifi.connected:
              - lambda: 'return id(my_key).has_state();'
              - lambda: 'return !id(send_state).is_running();'
          then:
            - script.execute: send_state

script:
  - id: send_state
    then:
      - http_request.send: 
          method: GET
          verify_ssl: false
          url: !lambda |-
            return ((std::string) "https://api.svitlobot.in.ua/channelPing?channel_key=" + id(my_key).state).c_str();
          on_response:
            then:
              - lambda: |-
                  if (status_code == 200) 
                  {
                    id(send_status).publish_state(true);
                    id(ok)++;
                  } 
                  else 
                  {
                    id(send_status).publish_state(false);
                    id(error)++;
                  }
              - component.update: quality
    mode: queued

text:
  - platform: template
    name: "${friendly_name} Key"
    id: my_key
    optimistic: true
    min_length: 0
    max_length: 15
    mode: text
    restore_value: true
    icon: mdi:key-chain-variant
    entity_category: config
    disabled_by_default: true

binary_sensor:
  - platform: template
    name: "${friendly_name} Status"
    id: send_status
    icon: mdi:lan-connect

sensor:
  - platform: template
    name: "${friendly_name} Delivery Quality"
    id: quality
    lambda: |-
      if (!id(my_key).has_state() || (id(ok) + id(error) == 0))
      {
        return NAN;
      }
      return id(ok) * 100 / (id(ok) + id(error));
    accuracy_decimals: 0
    unit_of_measurement: "%"
    icon: mdi:wan
    state_class: measurement

  - platform: uptime
    name: "${friendly_name} Uptime"
    entity_category: diagnostic

  - platform: wifi_signal
    name: "${friendly_name} WiFi Signal"
    entity_category: diagnostic
    icon: mdi:signal

button:
  - platform: restart
    name: "${friendly_name} Restart"            
    id: Restart
    entity_category: diagnostic
    icon: mdi:restart

  - platform: factory_reset
    name: "${friendly_name} Restart with Factory Default Settings"
    id: Reset
    entity_category: diagnostic
    disabled_by_default: true

text_sensor:
  - platform: version
    name: ${friendly_name} ESPHome Version
    hide_timestamp: true
    entity_category: diagnostic

  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      disabled_by_default: true
      entity_category: diagnostic
      icon: mdi:ip
    ssid:
      name: "${friendly_name} Connected SSID"
      disabled_by_default: true
      entity_category: diagnostic
      icon: mdi:access-point-network
    mac_address:
      name: "${friendly_name} Mac Address"
      disabled_by_default: true
      entity_category: diagnostic
      icon: mdi:console-network
