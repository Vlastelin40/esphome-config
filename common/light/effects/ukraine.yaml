addressable_lambda:
  name: Ukraine
  update_interval: 100ms
  lambda: |-
    const int amount = 1;
    const int step_amount = 5;
    const int fade_amount = 55;

    static int width = it.size();
    static int step = round(width * 10.0 / 100.0);
    static int state = 0;
    static int direction = 1;
    static int state_count = 0;
    static int fade_direction = 1;
    static int fade_count = 0;

    static Color led_colors[${num_leds}];
    static Color colors[2];

    if (initial_run)
    {
      ESP_LOGD("effect", "Ukraine");

      auto call = id(neopixel_led).turn_on();
      call.set_transition_length(1000);
      call.set_brightness(1.0);
      call.perform();

      colors[0] = Color(255,255,  0);
      colors[1] = Color(  0,  0,255);

      for (int i = 0; i < width; i++)
      {
        led_colors[i] = (i < width / 2) ? colors[0] : colors[1];
      }
    }

    // Fill Led
    if (state_count == 0)
    {
      for (int i = 0; i < width; i++)
      {
        if (${flagflip} == 0 || ${flagflip} == width - 1)
        {
          // led_colors[i] = (i < width / 2 + state) ? led_colors[0] : led_colors[width-1];
          led_colors[i] = (i < width / 2 + state) ? colors[0] : colors[1];
        }
        else
        {
          int x = i + state;
          x = x < 0 ? width + x : x;
          led_colors[x % width] = (i < width / 2) ? colors[0] : colors[1];
        }
      }

      state += direction;
      if(abs(state) > step)
      {
        direction = direction * -1;
        state = state + (direction * 2);
      }
    }
    state_count++;
    if (state_count > step_amount)
    {
      state_count = 0;
    }

    // Fade colors
    // for (int i = 0; i < width; i++)
    for (int i = 0; i < 2; i++)
    {
      // Color old_color = led_colors[i];
      Color old_color = colors[i];

      int red = old_color.red;
      int green = old_color.green;
      int blue = old_color.blue;

      if (fade_direction > 0)
      {
        if (red > 200) { red -= amount; }
        if (green > 200) { green -= amount; }
        if (blue > 200) { blue -= amount; }
      }
      else
      {
        if (red > 0 && red < 255) { red += amount; }
        if (green > 0 && green < 255) { green += amount; }
        if (blue > 0 && blue < 255) { blue += amount; }
      }

      // led_colors[i] = Color(red, green, blue);
      colors[i] = Color(red, green, blue);
    }
    fade_count++;

    if(fade_count > fade_amount)
    {
      fade_direction = fade_direction * -1;
      fade_count = 0;
    }

    // Final fill
    for (int i = 0; i < width; i++)
    {
      int x = (i + ${flagflip}) % width;
      it[x] = led_colors[i];
    }
