addressable_lambda:
  name: "Radar Ring"
  update_interval: 30ms
  lambda: |-
    static Color fastled_helper::leds[${num_leds}];
    static int step;

    if (initial_run)
    {
      ESP_LOGD("effect", "Radar Ring");

      std::fill_n(fastled_helper::leds, it.size(), Color::BLACK);
      step = 0;
    }

    // fade out old colors
    for (int i = 0; i < it.size(); i++)
    {
      Color old_color = fastled_helper::leds[i];

      int red = old_color.red;
      int red_sub = std::max(1, (int) ((red / 100.0) * ${radar_percentage}));

      int green = old_color.green;
      int green_sub = std::max(1, (int) ((green / 100.0) * ${radar_percentage}));

      int blue = old_color.blue;
      int blue_sub = std::max(1, (int) ((blue / 100.0) * ${radar_percentage}));

      if (red <= red_sub) { red = 0; } else { red -= red_sub; }
      if (green <= green_sub) { green = 0; } else { green -= green_sub; }
      if (blue <= blue_sub) { blue = 0; } else { blue -= blue_sub; }

      fastled_helper::leds[i] = Color(red, green, blue, 0);
    }

    fastled_helper::leds[(step - 1 + it.size()) % it.size()] = current_color;
    fastled_helper::leds[step] = current_color;
    fastled_helper::leds[(step + 1) % it.size()] = current_color;

    int i = random(0, it.size() - 1);
    // if (i > step - 3 && i < step + 3)
    if (i == step)
    {
      fastled_helper::leds[i] = Color(255, 255, 255);
    }

    // apply colors to light
    for (int i = 0; i < it.size(); i++)
    {
      it[i] = fastled_helper::leds[i];
    }

    step++;
    if (step >= it.size())
    {
      step = 0;
    }
